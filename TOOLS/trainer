use AI::Categorizer;
use AI::Categorizer::Learner::NaiveBayes;
use AI::Categorizer::KnowledgeSet;
use AI::Categorizer::Category;
use AI::Categorizer::Document;
use Getopt::Long;

$index = 0;
my $hyploop, $trainpath, $testpath;
my @financials, @potentials, @boilerplate, @junk, @alldocs;
GetOptions('start-index=i' => \$index, 'hypothesize' => \$hyploop, 'train-path=s' => \$trainpath,
	   'test-path=s' => \$testpath);

load_classifications();
do_classify_loop();

print "\nprocessing categories...";
my $c = new AI::Categorizer(collection_weighting => 'f');
add_category(\@financials, "financial statements");
add_category(\@potentials, "potentially interesting");
add_category(\@boilerplate, "boilerplate");
add_category(\@junk, "random crap");
$c->learner->train( knowledge_set => $c->knowledge_set );

if($hyploop) {
    do_hypothesis();
}

print "\ndone\n";

sub do_classify_loop {

    my %commandlist = ("1" => sub { push @financials, $files[$index] },
       		      "2" => sub { push @potentials, $files[$index] },
		      "3" => sub { push @boilerplate, $files[$index] },
		      "4" => sub { push @junk, $files[$index] },
		      "5" => sub { next; },
		      "x" => sub { print "\nsaving...\n"; save_classifications(); exit(); },
		      "s" => sub { save_classifications(); goto SAVELABEL; },	  
		      "b" => sub { last; } );      


    opendir DOCS, "./$trainpath" or die "couldn't open directory";
    @files = readdir(DOCS);
    undef $/;

    for(; $index < @files; $index++) {

    	  chomp $files[ $index ];
    	  open CURDOC, "./$trainpath/$files[ $index ]" or die "couldn't open $files[ $index ]";
	  $current_chunk = <CURDOC>;

	  print "\n\n\n\n\n$current_chunk\n";

	SAVELABEL:
	  print "\n1) financials\n2) potentially interesting\n3) boilerplate\n4) random chars\n5) skip\nx) exit\ns) save\nb) break";
	  print "\n$files[ $index ] ($index of " . $#files . ") #: ";
	  $command = getc;
	  getc;

	  $commandlist{$command}();
	  close CURDOC;
     }
}

sub save_classifications {

    open OUTFILE, ">classifications.save" or die "couldn't open save file";
    print OUTFILE "@financials\n@potentials\n@boilerplate\n@junk";
    close OUTFILE;
}


sub load_classifications {

    if(-e "classifications.save") {

    	  open INFILE, "classifications.save";
	  @lines = <INFILE>;
	  close INFILE;

	  @financials = split /\s/, $lines[0];
	  @potentials = split/\s/, $lines[1];
	  @boilerplate = split /\s/, $lines[2];
	  @junk = split /\s/, $lines[3];
    }
}

sub add_category {

    my $list = shift;
    my $catname = shift;

    foreach (@$list) {

    	    my %data;

    	    open CHUNK, "$trainpath/$_" or die "couldn't open chunk";
    	    $data{'content'} = <CHUNK>;
	    $data{'categories'} = [ $catname ];
    	    $c->knowledge_set->make_document(name => $_, %data);
	    close CHUNK; 
    }
}


sub do_hypothesis {

    my $nb = shift;

    my $collection = new AI::Categorizer::Collection::Files(path => "$testpath");
    while (my $document = $collection->next()) {

    	    print "\nfile: " . $document->name();
	    print "\nproceed? y/n: ";

	    $command = getc;
	    getc;

	    if($command eq 'y') {

	      open INFILE, "$testpath/" . $document->name();
	      print "\n\n" . <INFILE>;
	      close INFILE;

	      my $hypothesis = $c->learner->categorize($document);
	      print "\n\nmost probable match: " . $hypothesis->best_category;
	    }
    }
}